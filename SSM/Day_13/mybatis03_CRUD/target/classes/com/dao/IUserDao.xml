<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dao.UserDao">
    <!-- 配置查询所有操作 -->
    <select id="findAll" resultType="com.domain.User">
        select * from user
    </select>

    <!-- 根据ID查询用户 -->
    <select id="findById" resultType="com.domain.User" parameterType="int">
        select * from user where id = #{uid}
    </select>
    <!--注：
    resultType 属性：
        用于指定结果集的类型。
    parameterType 属性：
        用于指定传入参数的类型。
    sql 语句中使用#{}字符：
        它代表占位符，相当于原来 jdbc 部分所学的?，都是用于执行语句时替换实际的数据。
        具体的数据是由#{}里面的内容决定的
    #{}中内容的写法：
        由于数据类型是基本类型，所以此处可以随意写。
    -->

    <insert id="addUser" parameterType="com.domain.User">
        <!-- 增添用户时，获取插入的新 id -->
        <selectKey keyColumn="id" keyProperty="id" resultType="int">
            select last_insert_id();
        </selectKey>
        insert into user(name, password) values (#{name}, #{password})
    </insert>

    <update id="updateUser" parameterType="com.domain.User">
        <!-- 更新用户信息SQL语句 -->
        update user set password=#{password} where id=#{id}
    </update>

    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id = #{id}
    </delete>

    <select id="findByName" parameterType="java.lang.String" resultType="com.domain.User">
        select * from user where name like #{name}
    </select>

    <select id="findByVo" resultType="com.domain.User" parameterType="com.domain.QueryVo">
        select * from user where name like #{user.name}
    </select>

    <resultMap id="userMap" type="com.domain.UserOthers">
        <id column="id" property="userID"/>
        <result column="name" property="userName"/>
        <result column="password" property="userPassword"/>
    </resultMap>
    <select id="findAll1" resultType="com.domain.UserOthers" resultMap="userMap">
--         当数据库列名和实体类的属性名不一致时，无法得到正确结果
--         select * from user
--     第一种方案：在SQL语句编写时手动设置，较为繁琐
--         select id as userID, name as userName, password as userPassword from user
--         第二种方案：利用resultMap参数一次性设置
            select * from user
    </select>

</mapper>
